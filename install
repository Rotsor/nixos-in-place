#!/bin/bash

set -eu

here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

## Bring in some helper functions
source "$here/util"

## Sanity-check
log_start "Checking environment... "
check_existence "mount"
check_existence "modprobe"
check_existence "chroot"
check_existence "wget"
check_existence "sed"
check_existence "grep"
check_existence "unsquashfs"
check_existence "mktemp"
check_existence "id"
check_existence "head"
check_existence "tail"
check_existence "fdisk"
check_existence "cat"
log_end "seems sane"

## Setup essential variables; allow overriding with input
root_mount=$(mount | grep "/ " | sed 's/ /\n/' | head -n1)
root_type=$(mount | grep -Eo "/ type \w+" | sed 's/ /\n/g' | tail -n1)

expect_one_line() {
  ERROR_MESSAGE_ZERO=$1
  ERROR_MESSAGE_MULTIPLE=$2
  (set -eu;
   IFS='' read -r x || (echo "$ERROR_MESSAGE_ZERO" >& 2; exit 1)
   (! IFS='' read -r) || (echo "$ERROR_MESSAGE_MULTIPLE" >& 2; exit 1)
   printf "%s\n" "$x");
}

if [ -d /sys/firmware/efi ]; then
  boot_type=uefi
  boot_device=$(
    set -euo pipefail
    fdisk -l -o 'Device,Type' |
      grep 'EFI System' |
      sed -r 's_([^ ]*) *EFI System$_\1_' |
      expect_one_line \
	"Fdisk found no EFI System Partitions: please specify with -g option" \
	"Found multiple EFI System Partitions: please specify with -g option")
else
  boot_type=mbr
  if grep '/dev/nvme' <<< "$root_mount"; then
    boot_device=$(echo "$root_mount" | sed "s|p[0-9]\+$||");
  elif grep '/dev/sd' <<< "$root_mount"; then
    boot_device=$(echo "$root_mount" | sed "s|[0-9]\+||");
  elif grep '/dev/vd' <<< "$root_mount"; then
    boot_device=$(echo "$root_mount" | sed "s|[0-9]\+||");
  else
    echo "Unable to determine your grub boot device! Please specify with the -g option."
  fi
fi
working_directory=$(mktemp -d)

## Try to work out which architecture to use
set +e
  arch=$(uname -a | grep -o "x86_64" | head -n1)
set -e
[ ! "$arch" = "x86_64" ] && arch=i686
iso=nixos-minimal-16.09.680.4e14fd5-${arch}-linux.iso
minimal_space=3
graphical_space=5
required_space=$minimal_space
digitalocean=false

while getopts ":g:r:t:Gdw:h" opt; do
  case $opt in
    g)
      boot_device=$OPTARG
      ;;
    r)
      root_mount=$OPTARG
      ;;
    t)
      root_type=$OPTARG
      ;;
    G)
      iso=latest-iso-graphical-$arch-linux
      required_space=$graphical_space
      ;;
    d)
      digitalocean=true
      ;;
    w)
      working_directory=$OPTARG
      ;;
    h)
      show_help "$0"
      ;;
    \?)
      log "ERROR invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      log "ERROR option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [ "$(id -u)" != "0" ]; then
  log "You need to be root to do this"
  exit 1
fi

space=$(df -B 1G "$working_directory" | tail -n1 | sed 's/ \+/ /g' | cut -d' ' -f4)
if [ "$space" -lt "$required_space" ];
then
  log "WARNING: It *looks* like you don't have enough space for the install"
  log "You need ~${minimal_space}GB for the minimal ISO and ~${graphical_space}GB for the graphical ISO"
  log_start "Continue anyway? [yn] "
  read -n 1 -r
  log_end
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
    log "Exiting; nothing was harmed"
    exit 1
  fi
fi

boot_description=$(
  case $boot_type in
    uefi)
      echo "uefi boot with esp at $boot_device"
      ;;
    mbr)
      echo "mbr at $boot_device"
      ;;
    *)
      echo "bad boot type" >&2
      exit 1
      ;;
  esac)
## Give one last chance to back out
log "NixOS installer (nixos-in-place)"
log "   Boot => $boot_description"
log "   Root => $root_mount ($root_type)"
log "   ISO => $iso"
log "   Digital Ocean => $digitalocean"
log "   Working directory => $working_directory"
log_start "Continue? [yn] "
read -n 1 -r
log_end
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  log "Exiting; nothing was harmed"
  exit 1
fi

pushd "$working_directory"
  log "Downloading NixOS $iso"
  mkdir -p mnt host/nix

  wget -c https://d3g5gsiof5omrk.cloudfront.net/nixos/16.09/nixos-16.09.680.4e14fd5/$iso

  log "Extracting ISO"
  modprobe loop
  mount -o loop $iso mnt
    unsquashfs -d host/nix/store mnt/nix-store.squashfs '*'
  umount mnt
  rm -rf ./mnt

  ## Save one space
  rm -f ./$iso

  ## Setup the chroot environment before install
  log "Embarking stage1!"
  "$here/stage1" "$here" "$root_mount" "$root_type" "$boot_type" "$boot_device" "$digitalocean"

  ## Minimize residual space usage
  # /var/empty is immutable https://github.com/NixOS/nixpkgs/pull/18365
  chattr -i ./host/var/empty
  rm -rf ./host
popd

## Installation is complete
log_start "Reboot into NixOS now? [yn] "
read -n 1 -r
log_end
[[ $REPLY =~ ^[Yy]$ ]] && reboot
